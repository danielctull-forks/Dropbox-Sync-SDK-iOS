<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/DBFilesystem.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/DBFilesystem</TokenIdentifier>
			<Abstract type="html">The filesystem object provides a files and folder view of a user&apos;s Dropbox. The most basic
operations are listing a folder and opening a file, but it also allows you to move, delete, and
create files and folders.</Abstract>
			<DeclaredIn>DBFilesystem.h</DeclaredIn>
			
			<NodeRef refid="8"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DBFilesystem/initWithAccount:</TokenIdentifier>
			<Abstract type="html">Create a new filesystem object with a linked account from the
account manager.</Abstract>
			<DeclaredIn>DBFilesystem.h</DeclaredIn>			
			
			<Declaration>- (id)initWithAccount:(DBAccount *)account</Declaration>
			
			
			<Anchor>//api/name/initWithAccount:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/DBFilesystem/setSharedFilesystem:</TokenIdentifier>
			<Abstract type="html">A convienent place to store your app&apos;s filesystem</Abstract>
			<DeclaredIn>DBFilesystem.h</DeclaredIn>			
			
			<Declaration>+ (void)setSharedFilesystem:(DBFilesystem *)filesystem</Declaration>
			
			
			<Anchor>//api/name/setSharedFilesystem:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/DBFilesystem/sharedFilesystem</TokenIdentifier>
			<Abstract type="html">A convienent place to get your app&apos;s filesystem</Abstract>
			<DeclaredIn>DBFilesystem.h</DeclaredIn>			
			
			<Declaration>+ (DBFilesystem *)sharedFilesystem</Declaration>
			
			
			<Anchor>//api/name/sharedFilesystem</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DBFilesystem/listFolder:error:</TokenIdentifier>
			<Abstract type="html">Returns a list of DBFileInfo objects representing the files contained in the folder at path.
If completedFirstSync is false, then this call will block until the first sync completes or an
error occurs.</Abstract>
			<DeclaredIn>DBFilesystem.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)listFolder:(DBPath *)path error:(DBError **)error</Declaration>
			
			<ReturnValue><Abstract type="html">An array of DBFileInfo objects if successful, or nil if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/listFolder:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DBFilesystem/fileInfoForPath:error:</TokenIdentifier>
			<Abstract type="html">Returns the file info for the file or folder at path.</Abstract>
			<DeclaredIn>DBFilesystem.h</DeclaredIn>			
			
			<Declaration>- (DBFileInfo *)fileInfoForPath:(DBPath *)path error:(DBError **)error</Declaration>
			
			
			<Anchor>//api/name/fileInfoForPath:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DBFilesystem/openFile:error:</TokenIdentifier>
			<Abstract type="html">Opens an existing file and returns a file object representing the file at path.</Abstract>
			<DeclaredIn>DBFilesystem.h</DeclaredIn>			
			
			<Declaration>- (DBFile *)openFile:(DBPath *)path error:(DBError **)error</Declaration>
			
			<ReturnValue><Abstract type="html">The file object if the file was opened successfully, or nil if an error
occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/openFile:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DBFilesystem/createFile:error:</TokenIdentifier>
			<Abstract type="html">Creates a new file at path and returns a file object open at that path.</Abstract>
			<DeclaredIn>DBFilesystem.h</DeclaredIn>			
			
			<Declaration>- (DBFile *)createFile:(DBPath *)path error:(DBError **)error</Declaration>
			
			<ReturnValue><Abstract type="html">The newly created file object if the file was opened successfuly, or nil if an
error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/createFile:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DBFilesystem/createFolder:error:</TokenIdentifier>
			<Abstract type="html">Creates a new folder at path.</Abstract>
			<DeclaredIn>DBFilesystem.h</DeclaredIn>			
			
			<Declaration>- (BOOL)createFolder:(DBPath *)path error:(DBError **)error</Declaration>
			
			<ReturnValue><Abstract type="html">YES if the folder was created successfully, or NO if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/createFolder:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DBFilesystem/deletePath:error:</TokenIdentifier>
			<Abstract type="html">Deletes the file or folder at path.</Abstract>
			<DeclaredIn>DBFilesystem.h</DeclaredIn>			
			
			<Declaration>- (BOOL)deletePath:(DBPath *)path error:(DBError **)error</Declaration>
			
			<ReturnValue><Abstract type="html">YES if the file or folder was deleted successfully, or NO if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/deletePath:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DBFilesystem/movePath:toPath:error:</TokenIdentifier>
			<Abstract type="html">Moves a file or folder at fromPath to toPath.</Abstract>
			<DeclaredIn>DBFilesystem.h</DeclaredIn>			
			
			<Declaration>- (BOOL)movePath:(DBPath *)fromPath toPath:(DBPath *)toPath error:(DBError **)error</Declaration>
			
			<ReturnValue><Abstract type="html">YES if the file or folder was moved successfully, or NO if an error occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/movePath:toPath:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DBFilesystem/setAccount:</TokenIdentifier>
			<Abstract type="html">The account object this filesystem was created with.</Abstract>
			<DeclaredIn>DBFilesystem.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) DBAccount *account</Declaration>
			
			
			<Anchor>//api/name/account</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DBFilesystem/account</TokenIdentifier>
			<Abstract type="html">The account object this filesystem was created with.</Abstract>
			<DeclaredIn>DBFilesystem.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) DBAccount *account</Declaration>
			
			
			<Anchor>//api/name/account</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DBFilesystem/setCompletedFirstSync:</TokenIdentifier>
			<Abstract type="html">When a user&apos;s account is first linked, the filesystem needs to be synced with the server before
it can be used. This property indicates whether the first sync has completed and the filesystem
is ready to use.</Abstract>
			<DeclaredIn>DBFilesystem.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) BOOL completedFirstSync</Declaration>
			
			
			<Anchor>//api/name/completedFirstSync</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DBFilesystem/completedFirstSync</TokenIdentifier>
			<Abstract type="html">When a user&apos;s account is first linked, the filesystem needs to be synced with the server before
it can be used. This property indicates whether the first sync has completed and the filesystem
is ready to use.</Abstract>
			<DeclaredIn>DBFilesystem.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) BOOL completedFirstSync</Declaration>
			
			
			<Anchor>//api/name/completedFirstSync</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DBFilesystem/setShutDown:</TokenIdentifier>
			<Abstract type="html">Whether the filesystem is currently shut down. The filesystem will shut down if the account
associated with this filesystem becomes unlinked.</Abstract>
			<DeclaredIn>DBFilesystem.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, getter=isShutDown) BOOL shutDown</Declaration>
			
			
			<Anchor>//api/name/shutDown</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DBFilesystem/shutDown</TokenIdentifier>
			<Abstract type="html">Whether the filesystem is currently shut down. The filesystem will shut down if the account
associated with this filesystem becomes unlinked.</Abstract>
			<DeclaredIn>DBFilesystem.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, getter=isShutDown) BOOL shutDown</Declaration>
			
			
			<Anchor>//api/name/shutDown</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DBFilesystem/setStatus:</TokenIdentifier>
			<Abstract type="html">Returns a bitmask representing all the currently active states of the filesystem OR&apos;ed together.
See the DBSyncStatus enum for more details.</Abstract>
			<DeclaredIn>DBFilesystem.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) DBSyncStatus status</Declaration>
			
			
			<Anchor>//api/name/status</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DBFilesystem/status</TokenIdentifier>
			<Abstract type="html">Returns a bitmask representing all the currently active states of the filesystem OR&apos;ed together.
See the DBSyncStatus enum for more details.</Abstract>
			<DeclaredIn>DBFilesystem.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) DBSyncStatus status</Declaration>
			
			
			<Anchor>//api/name/status</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DBFilesystem/addObserver:forPath:block:</TokenIdentifier>
			<Abstract type="html">Add an observer to be notified any time the file or folder at path changes.</Abstract>
			<DeclaredIn>DBFilesystem.h</DeclaredIn>			
			
			<Declaration>- (BOOL)addObserver:(id)observer forPath:(DBPath *)path block:(DBObserver)block</Declaration>
			
			
			<Anchor>//api/name/addObserver:forPath:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DBFilesystem/addObserver:forPathAndChildren:block:</TokenIdentifier>
			<Abstract type="html">Add an observer to be notified any time the folder at path changes or a file or folder
directly contained in path changes.</Abstract>
			<DeclaredIn>DBFilesystem.h</DeclaredIn>			
			
			<Declaration>- (BOOL)addObserver:(id)observer forPathAndChildren:(DBPath *)path block:(DBObserver)block</Declaration>
			
			
			<Anchor>//api/name/addObserver:forPathAndChildren:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DBFilesystem/addObserver:forPathAndDescendants:block:</TokenIdentifier>
			<Abstract type="html">Add an observer to be notified any time the folder at path changes or a file or folder
contained somewhere beneath path changes.</Abstract>
			<DeclaredIn>DBFilesystem.h</DeclaredIn>			
			
			<Declaration>- (BOOL)addObserver:(id)observer forPathAndDescendants:(DBPath *)path block:(DBObserver)block</Declaration>
			
			
			<Anchor>//api/name/addObserver:forPathAndDescendants:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DBFilesystem/removeObserver:</TokenIdentifier>
			<Abstract type="html">Unregister all blocks associated with observer from receiving updates.</Abstract>
			<DeclaredIn>DBFilesystem.h</DeclaredIn>			
			
			<Declaration>- (void)removeObserver:(id)observer</Declaration>
			
			
			<Anchor>//api/name/removeObserver:</Anchor>
		</Token>
		
	</File>
</Tokens>